"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const protected_1 = __importDefault(require("../middlewares/protected"));
const roleAuth_1 = require("../middlewares/roleAuth");
const container_1 = require("../config/container");
const router = express_1.default.Router();
const roleAuth = new roleAuth_1.RoleAuth();
const adminController = container_1.container.get('AdminController');
const packageController = container_1.container.get('PackageController');
const bookingController = container_1.container.get('BookingController');
router.get('/getData/:user/:perPage/:page', protected_1.default, roleAuth.checkRole(['Admin']), adminController.getAllData);
router.patch('/blockOrUnblock', protected_1.default, roleAuth.checkRole(['Admin']), adminController.blockOrUnblock);
router.post("/getPresignedUrl", protected_1.default, roleAuth.checkRole(['Admin']), adminController.getPresignedUrl);
router.post('/addCategory', protected_1.default, roleAuth.checkRole(['Admin']), adminController.addCategory);
router.get('/categories/:perPage/:page', protected_1.default, roleAuth.checkRole(['Admin']), adminController.getCategories);
router.patch('/category-delete/:categoryId', protected_1.default, roleAuth.checkRole(['Admin']), adminController.deleteCategory);
router.get('/category-check/:categoryName', protected_1.default, roleAuth.checkRole(['Admin']), adminController.isCategoryExist);
router.patch('/category-edit/:categoryId', protected_1.default, roleAuth.checkRole(['Admin']), adminController.editCategory);
router.get('/agent-pending/:perPage/:page', protected_1.default, roleAuth.checkRole(['Admin']), adminController.pendingAgentData);
router.patch('/approveAgent/:agentId', protected_1.default, roleAuth.checkRole(['Admin']), adminController.agentApproval);
router.patch('/rejectAgentRequest/:agentId', protected_1.default, roleAuth.checkRole(['Admin']), adminController.rejectAgentRequest);
router.patch('/block-package/:packageId', protected_1.default, roleAuth.checkRole(['Admin']), adminController.blockPackage);
router.get('/packages', protected_1.default, roleAuth.checkRole(['Admin']), packageController.getPackages);
router.get('/booking', protected_1.default, roleAuth.checkRole(['Admin']), bookingController.getBookingDataToAdmin);
router.get('/dashboard', protected_1.default, roleAuth.checkRole(['Admin']), bookingController.getDashboard);
router.patch('/packages/verify/:packageId', protected_1.default, roleAuth.checkRole(['Admin']), packageController.verifyPackage);
exports.default = router;
